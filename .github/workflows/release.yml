name: Create Release PR

on: workflow_dispatch

jobs:
  # This workflow contains a single job called "greet"
  create-release-pr:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set Variables
        run: |
          echo "DATE=$(date +'%Y/%m/%d')" >> "$GITHUB_ENV"
          TARGET_BRANCH=""
          TITLE=""

          BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)
          if [[ $BRANCH == "staging" ]]; then
            TARGET_BRANCH=main
            TITLE=Production
          else
            print "Unexpected source branch for release"
            exit 0
          fi

          PRS=$(git tag -l --no-merged origin/$TARGET_BRANCH | grep -o "[0-9]\+")

          GITHUB_LINKS="<ul>"
          AUTHORS=""
          SLACK_MESSAGE=""

          gen_emoji() {
            case $1 in
              null) echo ":large_blue_circle:" ;;
              feature) echo ":large_blue_circle:" ;;
              fix) echo ":large_green_circle:" ;;
              test) echo ":large_orange_circle:" ;;
              improvement) echo ":large_purple_circle:" ;;
              refactor) echo ":black_circle:" ;;
              dx) echo ":white_circle:" ;;
              ops) echo ":white_circle:" ;;
              *) echo "Unexpected label" >&2 ; exit 1 ;;
            esac
          }

          gen_section() {
            echo "{\
              \"type\": \"mrkdwn\",\
              \"text\": \"$1 <$3| *$2*>\"\
            },"
          }

          CHANGE_COUNT=0

          for pr_number in $PRS
          do
            url=https://api.github.com/repos/vidocco/nerdtrivial/pulls/$pr_number
            link_url=https://github.com/vidocco/nerdtrivial/pull/$pr_number
            res=$(curl $url -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}')
            owner=$(echo $res | jq --raw-output '.user.login')
            pr_title=$(echo $res | jq --raw-output '.title')
            label=$(echo $res | jq --raw-output '[.labels[] | select(.name == "feature" or .name == "fix" or .name == "test" or .name == "improvement" or .name == "refactor" or .name == "dx" or .name == "ops")] | .[0] | .name' | gen_emoji)

            AUTHORS="$AUTHORS$owner\n"
            SLACK_MESSAGE="$SLACK_MESSAGE$(if [[ $CHANGE_COUNT -lt 10 ]];then echo $(gen_section "$label" "$pr_title" "$link_url");fi)"
            GITHUB_LINKS="$GITHUB_LINKS<li>vidocco/nerdtrivial/pull/$pr_number</li>"
            CHANGE_COUNT=$(($CHANGE_COUNT+1))
          done

          GITHUB_LINKS="$GITHUB_LINKS</ul>"
          AUTHORS=$(echo -e $AUTHORS | sort --unique | sed -z "s/\n/,/g")
          SLACK_MESSAGE=$(echo $SLACK_MESSAGE | sed 's/.$//')

          echo "LINKS=$GITHUB_LINKS" >> "$GITHUB_ENV"
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> "$GITHUB_ENV"
          echo "TITLE=$TITLE" >> "$GITHUB_ENV"
          echo "AUTHORS=$AUTHORS" >> "$GITHUB_ENV"
          echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> "$GITHUB_ENV"
          echo "CHANGE_COUNT=$CHANGE_COUNT" >> "$GITHUB_ENV"
      - uses: repo-sync/pull-request@v2
        id: open-release-pr
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          destination_branch: "${{ env.TARGET_BRANCH }}"
          pr_title: "${{ env.TITLE }} Release - ${{env.DATE}}"
          pr_reviewer: "${{ env.AUTHORS }}"
          pr_body: |
            ## Changelist <br/>
            ${{ env.LINKS }}

            ## Checklist <br/>
            - [ ] All backup tasks have been performed.
      - name: Build Full Slack Message
        env:
          SLACK_MESSAGE: ${{env.SLACK_MESSAGE}}
          CHANGE_COUNT: ${{env.CHANGE_COUNT}}
          PR_URL: ${{steps.open-release-pr.outputs.pr_url}}
        run: |
          SLACK_MESSAGE_START="\
            \"blocks\": [\
              {\
                \"type\": \"section\",\
                \"text\": {\
                  \"type\": \"mrkdwn\",\
                  \"text\": \"A new backend *$TITLE release* has been created\"\
                },\
                \"accessory\": {\
                  \"type\": \"button\",\
                  \"text\": {\
                      \"type\": \"plain_text\",\
                      \"text\": \"See The Full PR\",\
                      \"emoji\": true\
                  },\
                  \"url\": \"$PR_URL\"\
                }\
              },\
              {\
                \"type\": \"header\",\
                \"text\": {\
                  \"type\": \"plain_text\",\
                  \"text\": \"Changelist\"\
                }\
              },\
              {\
                \"type\": \"context\",\
                \"elements\": [\
                  {\
                    \"type\": \"mrkdwn\",\
                    \"text\": \":large_blue_circle: feature/code change\"\
                  },\
                  {\
                    \"type\": \"mrkdwn\",\
                    \"text\": \":large_green_circle: fix\"\
                  },\
                  {\
                    \"type\": \"mrkdwn\",\
                    \"text\": \":large_orange_circle: test\"\
                  },\
                  {\
                    \"type\": \"mrkdwn\",\
                    \"text\": \":large_purple_circle: improvement\"\
                  },\
                  {\
                    \"type\": \"mrkdwn\",\
                    \"text\": \":black_circle: refactor\"\
                  },\
                  {\
                    \"type\": \"mrkdwn\",\
                    \"text\": \":white_circle: ops/dx\"\
                  }\
                ]\
              },\
              { \"type\": \"divider\" },\
              {\
                  \"type\": \"section\",\
                  \"fields\": ["

          SLACK_MESSAGE_END="]}, { \"type\": \"divider\" }]"

          if [[ $CHANGE_COUNT > 10 ]]; then
            SLACK_MESSAGE_END="]\
                },\
                {\
                    \"type\": \"context\",\
                    \"elements\": [\
                        {\
                            \"type\": \"mrkdwn\",\
                            \"text\": \":rocket: and *$(($CHANGE_COUNT-10))* other changes (see PR for full details).\"\
                        }\
                    ]\
                },\
                { \"type\": \"divider\" }\
              ]"
          fi

          FULL_SLACK_MESSAGE="$SLACK_MESSAGE_START$SLACK_MESSAGE$SLACK_MESSAGE_END"
          echo "FULL_SLACK_MESSAGE=$FULL_SLACK_MESSAGE" >> "$GITHUB_ENV"
      - name: Notify support-general
        if: ${{ env.TARGET_BRANCH == 'main' }}
        env:
          SLACK_BOT_TOKEN: ${{secrets.SLACK_BOT_TOKEN}}
        run: |
          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Content-type: application/json; charset=utf-8" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -d '{ "channel": "C9ZH84S3S", ${{env.FULL_SLACK_MESSAGE}} }'
